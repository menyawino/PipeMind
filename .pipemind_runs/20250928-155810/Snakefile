# Auto-generated by pipemind.snakemake.generator at 2025-09-28 15:58:10
rule all:
    input:
        '../output_38/analysis/006_variant_filtering/S2.filtered.snp.vcf'

rule merge_bams:
    input:
        bams=expand(rules.bwa_mem.output.bam, sample={sample}, lane=(L001, L002, L003, L004))
    output:
        merged_bam='../output_38/analysis/003_alignment/02_merged/{sample}.merged.bam'
    threads: 4
    conda: 'icc_04_alignment'
    shell: "sambamba merge -t {threads} {output.merged_bam} {input.bams} > {log} 2>&1"

rule add_read_groups:
    input:
        sorted_bam=rules.merge_bams.output.merged_bam
    output:
        rg_bam='../output_38/analysis/003_alignment/03_read_grouped/{sample}.rg.bam'
    conda: 'icc_gatk'
    shell: "gatk AddOrReplaceReadGroups I={input.sorted_bam} O={output.rg_bam} RGID={params.rgid} RGLB={params.rglb} RGPL={params.rgpl} RGPU={params.rgpu} RGSM={params.rgsm} RGCN={params.rgcn} RGDS={params.rgds} VALIDATION_STRINGENCY={params.validation_stringency} > {log} 2>&1"

rule mark_duplicates:
    input:
        rg_bam=rules.add_read_groups.output.rg_bam
    output:
        markdup_bam='../output_38/analysis/003_alignment/04_markduped/{sample}.markdup.bam',
        metrics='../output_38/analysis/003_alignment/04_markduped/{sample}.markdup.metrics.txt'
    threads: 4
    conda: 'icc_gatk'
    shell: "gatk MarkDuplicatesSpark -I {input.rg_bam} -O {output.markdup_bam} -M {output.metrics} --spark-master local[{threads}] --conf spark.ui.enabled=false > {log} 2>&1"

rule base_recalibrator:
    input:
        bam=rules.mark_duplicates.output.markdup_bam
    output:
        recal_table='../output_38/analysis/003_alignment/05_bqsr/{sample}.recal_data.table'
    threads: 4
    conda: 'icc_gatk'
    shell: "gatk BaseRecalibratorSpark -I {input.bam} -R {params.ref} -O {output.recal_table} --known-sites {params.known_sites} --spark-master local[{threads}] --conf spark.ui.enabled=false > {log} 2>&1"

rule apply_bqsr:
    input:
        bam=rules.mark_duplicates.output.markdup_bam,
        recal_table=rules.base_recalibrator.output.recal_table
    output:
        bqsr_bam='../output_38/analysis/003_alignment/05_bqsr/{sample}.bqsr.bam'
    threads: 4
    conda: 'icc_gatk'
    shell: "gatk ApplyBQSRSpark -R {params.ref} -I {input.bam} --bqsr-recal-file {input.recal_table} -O {output.bqsr_bam} --spark-master local[{threads}] --conf spark.ui.enabled=false > {log} 2>&1"

rule filter_bam_target:
    input:
        bam=rules.apply_bqsr.output.bqsr_bam
    output:
        bam_target='../output_38/analysis/003_alignment/06_filtering/{sample}.target.bam'
    threads: 1
    conda: 'icc_gatk'
    shell: "sambamba view -t {threads} -L {params.TargetFile} -f bam -F \"mapping_quality > 8\" {input.bam} -o {output.bam_target} 2> {log}"

rule haplotypecaller:
    input:
        bam=rules.filter_bam_target.output.bam_target
    output:
        gvcf='../output_38/analysis/005_variant_calling/{sample}.haplotypecaller.g.vcf'
    threads: 11
    conda: 'icc_gatk'
    shell: "gatk HaplotypeCallerSpark -R {params.ref} -I {input.bam} -O {output.gvcf} -ERC GVCF -OVI true --intervals {params.target} --spark-master local[{threads}] &> {log}"

rule index_gvcf:
    input:
        gvcf=rules.haplotypecaller.output.gvcf
    output:
        gvcf_index='../output_38/analysis/005_variant_calling/{sample}.haplotypecaller.g.vcf.idx'
    threads: 1
    conda: 'icc_gatk'
    shell: "gatk IndexFeatureFile -I {input.gvcf} &> {log}"

rule variant_annotation:
    input:
        vcf=rules.haplotypecaller.output.gvcf,
        idx=rules.index_gvcf.output.gvcf_index
    output:
        annotated_vcf='../output_38/analysis/005_variant_calling/{sample}.annotated.vcf'
    threads: 1
    conda: 'icc_gatk'
    shell: "gatk VariantAnnotator -R {params.ref} -V {input.vcf} -O {output.annotated_vcf} -A Coverage -A DepthPerAlleleBySample -A QualByDepth -A InbreedingCoeff -G StandardAnnotation --dbsnp {params.dbsnp} --intervals {params.target} &> {log}"

rule genotype_gvcfs:
    input:
        gvcf=rules.variant_annotation.output.annotated_vcf
    output:
        vcf='../output_38/analysis/005_variant_calling/{sample}.genotyped.vcf'
    threads: 1
    conda: 'icc_gatk'
    shell: "gatk GenotypeGVCFs -R {params.ref} -V {input.gvcf} -O {output.vcf} -A DepthPerAlleleBySample -A Coverage -A InbreedingCoeff --intervals {params.target} --dbsnp {params.dbsnp} &> {log}"

rule vqsr_snp_recalibration:
    input:
        vcf=rules.genotype_gvcfs.output.vcf
    output:
        recal_snp='../output_38/analysis/005_variant_calling/{sample}.recalibrate_SNP.recal',
        tranches_snp='../output_38/analysis/005_variant_calling/{sample}.recalibrate_SNP.tranches'
    threads: 11
    conda: 'icc_gatk'
    shell: "gatk VariantRecalibrator -R {params.ref} -V {input.vcf} --resource:hapmap,known=false,training=true,truth=true,prior=15.0 {params.hapmap} --resource:omni,known=false,training=true,truth=true,prior=12.0 {params.omni} --resource:1000G,known=false,training=true,truth=false,prior=10.0 {params.tenk} --resource:dbsnp,known=true,training=false,truth=false,prior=2.0 {params.dbsnp} -an QD -an MQRankSum -an ReadPosRankSum -an FS -an SOR -an DP -mode SNP -O {output.recal_snp} --tranches-file {output.tranches_snp} &> {log}"

rule apply_vqsr_snp:
    input:
        vcf=rules.genotype_gvcfs.output.vcf,
        recal_snp=rules.vqsr_snp_recalibration.output.recal_snp,
        tranches_snp=rules.vqsr_snp_recalibration.output.tranches_snp
    output:
        snp_recal_vcf='../output_38/analysis/005_variant_calling/{sample}.recalibrated_snp.vcf'
    threads: 11
    conda: 'icc_gatk'
    shell: "gatk ApplyVQSR -R {params.ref} -V {input.vcf} -O {output.snp_recal_vcf} --recal-file {input.recal_snp} --tranches-file {input.tranches_snp} -mode SNP --truth-sensitivity-filter-level 99.0 &> {log}"

rule vqsr_indel_recalibration:
    input:
        vcf=rules.apply_vqsr_snp.output.snp_recal_vcf
    output:
        recal_indel='../output_38/analysis/005_variant_calling/{sample}.recalibrate_INDEL.recal',
        tranches_indel='../output_38/analysis/005_variant_calling/{sample}.recalibrate_INDEL.tranches'
    threads: 11
    conda: 'icc_gatk'
    shell: "gatk VariantRecalibrator -R {params.ref} -V {input.vcf} --resource:mills,known=true,training=true,truth=true,prior=12.0 {params.mills} --resource:dbsnp,known=true,training=false,truth=false,prior=2.0 {params.dbsnp} -an QD -an ReadPosRankSum -an FS -an SOR -an DP -mode INDEL -O {output.recal_indel} --tranches-file {output.tranches_indel} &> {log}"

rule apply_vqsr_indel:
    input:
        vcf=rules.apply_vqsr_snp.output.snp_recal_vcf,
        recal_indel=rules.vqsr_indel_recalibration.output.recal_indel,
        tranches_indel=rules.vqsr_indel_recalibration.output.tranches_indel
    output:
        indel_recal_vcf='../output_38/analysis/005_variant_calling/{sample}.recalibrated_indel.vcf'
    threads: 11
    conda: 'icc_gatk'
    shell: "gatk ApplyVQSR -R {params.ref} -V {input.vcf} -O {output.indel_recal_vcf} --recal-file {input.recal_indel} --tranches-file {input.tranches_indel} -mode INDEL --truth-sensitivity-filter-level 99.0 &> {log}"

rule split_vcfs:
    input:
        vcf=rules.apply_vqsr_indel.output.indel_recal_vcf
    output:
        snp_vcf='../output_38/analysis/005_variant_calling/{sample}.genotyped.snp.vcf',
        indel_vcf='../output_38/analysis/005_variant_calling/{sample}.genotyped.indel.vcf'
    threads: 1
    conda: 'icc_gatk'
    shell: "gatk SplitVcfs I={input.vcf} SNP_OUTPUT={output.snp_vcf} INDEL_OUTPUT={output.indel_vcf} STRICT=false &> {log}"

rule filter_snps:
    input:
        snp_vcf=rules.split_vcfs.output.snp_vcf
    output:
        filtered_snp_vcf='../output_38/analysis/006_variant_filtering/{sample}.filtered.snp.vcf'
    conda: 'icc_gatk'
    shell: "gatk VariantFiltration -R {params.ref} -V {input.snp_vcf} -O {output.filtered_snp_vcf} --filter-expression \"QD < 2.0\" --filter-expression \"FS > 60.0\" --filter-expression \"MQ < 40.0\" --filter-expression \"MQRankSum < -12.5\" --filter-expression \"ReadPosRankSum < -8.0\" --filter-name \"QDFilter\" --filter-name \"FSFilter\" --filter-name \"MQFilter\" --filter-name \"MQRankSumFilter\" --filter-name \"ReadPosFilter\" --intervals {params.target} &> {log}"
